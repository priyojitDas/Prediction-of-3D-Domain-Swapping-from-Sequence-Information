E <- c(E,wilcox.test(as.numeric(tbl_gds[i,2:9]),as.numeric(tbl_gds[i,10:15]),paired = TRUE)$p.value)
}
for(i in 1:1000){
E <- c(E,wilcox.test(as.numeric(tmp[i,2:9]),as.numeric(tmp[i,10:15]),paired = TRUE)$p.value)
}
for(i in 1:1000){
E <- c(E,t.test(as.numeric(tmp[i,2:9]),as.numeric(tmp[i,10:15]),paired = TRUE)$p.value)
}
t.test(c(1,2),c(2,3))
t.test(c(1,2),c(2,3,4))
t.test(c(1,2),c(2,3,4),paired = TRUE)
wilcox.test(c(1,2),c(2,3,4),paired = TRUE)
t.test(c(1,2),c(2,3,4))
wilcoxon.test(c(1,2),c(2,3,4))
wilcox.test(c(1,2),c(2,3,4))
wilcox.test(c(1,2),c(5,3,4))
t.test(c(1,2),c(5,3,4))
for(i in 1:1000){
E <- c(E,t.test(as.numeric(tmp[i,2:14]),as.numeric(tmp[i,15:22]))$p-value)
}
for(i in 1:1000){
E <- c(E,t.test(as.numeric(tmp[i,2:14]),as.numeric(tmp[i,15:22]))$p.value)
}
tmp$pval <- E
write.csv(tmp,"ProstateT.csv",col.names = TRUE)
tmp <- read.csv("DBL.csv",header = TRUE)
for(i in 1:1000){
E <- c(E,t.test(as.numeric(tmp[i,2:9]),as.numeric(tmp[i,10:15]))$p.value)
}
tmp$pval <- E
E <- c()
for(i in 1:1000){
E <- c(E,t.test(as.numeric(tmp[i,2:9]),as.numeric(tmp[i,10:15]))$p.value)
}
E <- c()
for(i in 1:1000){
E <- c(E,t.test(as.numeric(tmp[i,2:9]),as.numeric(tmp[i,10:15]))$p.value)
}
tmp$pval <- E
write.csv(tmp,"DBLT.csv",col.names = TRUE)
?t.test
t.test(c(1,2),c(5,3,4))
tmp <- read.csv("Colorectal.csv",header = TRUE)
E <- c()
for(i in 1:1000){
E <- c(E,t.test(as.numeric(tmp[i,2:18]),as.numeric(tmp[i,19:35]))$p.value)
}
tmp$pVal <- E
write.csv(tmp,"ColorectalT.csv",col.names = TRUE)
tmp <- read.csv("ITP.csv",header = TRUE)
E <- c()
for(i in 1:1000){
E <- c(E,t.test(as.numeric(tmp[i,2:8]),as.numeric(tmp[i,9:14]))$p.value)
}
write.csv(tmp,"ITPT.csv",col.names = TRUE)
gds <- getGEO(filename = "GDS4794.soft.gz")
library(Biobase)
library(GEOquery)
library(clusterSim)
gds <- getGEO(filename = "GDS4794.soft.gz")
Meta(gds)$sample_count
tbl_gds <- Table(gds)[,]
tbl_gds$ID_REF <- NULL
tbl_gds <- tbl_gds[complete.cases(tbl_gds),]
tbl_gds[,-1] <- data.Normalization(tbl_gds[,-1],type="n1",normalization = "column")
View(tbl_gds)
A <- apply(tbl_gds[,2:24],1,mean)
B <- apply(tbl_gds[,25:66],1,mean)
C <- apply(tbl_gds[,2:24],1,sd)
D <- apply(tbl_gds[,25:66],1,sd)
tbl_gds$rnk <- ((A - B) ^ 2) / ((C ^ 2) + (D ^ 2))
tbl_gds <- tbl_gds[order(-tbl_gds$rnk),]
tbl_gds <- tbl_gds[1:1500,]
tbl_gds <- tbl_gds[!duplicated(tbl_gds$IDENTIFIER),]
tbl_gds <- tbl_gds[1:1000,]
E <- c()
for(i in 1:1000){
E <- c(E,t.test(as.numeric(tbl_gds[i,2:24]),as.numeric(tbl_gds[i,25:66]))$p.value)
}
tbl_gds$pval <- E
write.csv(tbl_gds,"SCLCT.csv",col.names = TRUE)
gds <- getGEO(filename = "GDS4056.soft.gz")
Meta(gds)$sample_count
tbl_gds <- Table(gds)[,]
tbl_gds$ID_REF <- NULL
tbl_gds <- tbl_gds[complete.cases(tbl_gds),]
tbl_gds[,-1] <- data.Normalization(tbl_gds[,-1],type="n1",normalization = "column")
BNeg <- c(1,3,10:16,21:24,34:47,59:60)
BPos <- c(2,4:9,17:20,25:33,48:58,61)
A <- apply(tbl_gds[,BNeg],1,mean)
warning()
warnings()
A
tbl_gds[,1]
tbl_gds[,c(1,3)]
apply(tbl_gds[,c(2,5)],1,mean)
sum(is.na(tbl_gds))
A <- apply(tbl_gds[,BNeg],1,mean)
BNeg <- c(1,3,10:16,21:24,34:47,59:60) + 1
BPos <- c(2,4:9,17:20,25:33,48:58,61) + 1
A <- apply(tbl_gds[,BNeg],1,mean)
B <- apply(tbl_gds[,BPos],1,mean)
C <- apply(tbl_gds[,BNeg],1,sd)
D <- apply(tbl_gds[,BPos],1,sd)
tbl_gds$rnk <- ((A - B) ^ 2) / ((C ^ 2) + (D ^ 2))
tbl_gds <- tbl_gds[order(-tbl_gds$rnk),]
tbl_gds <- tbl_gds[1:1500,]
tbl_gds <- tbl_gds[!duplicated(tbl_gds$IDENTIFIER),]
tbl_gds <- tbl_gds[1:1000,]
E <- c()
for(i in 1:1000){
E <- c(E,t.test(as.numeric(tbl_gds[i,BNeg]),as.numeric(tbl_gds[i,BPos]))$p.value)
}
tbl_gds$pval <- E
write.csv(tbl_gds,"BT.csv",col.names = TRUE)
View(tbl_gds)
tbl_gds <- tbl_gds[,c(1,BNeg,BPos,63,64)]
View(tbl_gds)
write.csv(tbl_gds,"BT.csv",col.names = TRUE)
library(Biobase)
library(GEOquery)
library(clusterSim)
gds <- getGEO(filename = "GDS4056.soft.gz")
Meta(gds)$sample_count
tbl_gds <- Table(gds)[,]
tbl_gds$ID_REF <- NULL
tbl_gds <- tbl_gds[complete.cases(tbl_gds),]
tbl_gds[,-1] <- data.Normalization(tbl_gds[,-1],type="n1",normalization = "column")
A <- apply(tbl_gds[,BNeg],1,mean)
BNeg <- c(1,3,10:16,21:24,34:47,59:60) + 1
BPos <- c(2,4:9,17:20,25:33,48:58,61) + 1
A <- apply(tbl_gds[,BNeg],1,mean)
B <- apply(tbl_gds[,BPos],1,mean)
A[]:
}
A[1:5]
b[1:5]
B[1:5]
?t.test
p1 <- 12 / 47
p2 <- 30 / 38
se <- sqrt((p1 * (1 - p1)) / 47 + (p2 * (1 - p2)) / 38)
z_score <- (p1 - p2) / se
z_score
p1
p2
0.016 / 0.034
0.034 / 0.016
se <- sqrt((4.2 * 4.2) / 30 + (10.3 * 10.3) / 23)
(26 - 15) / se
40 + 1.96 * 4.47
40 - 1.96 * 4.47
(197 - 168)/ sqrt(197 + 168)
pt(1.85,df = 19)
pt(2.61,df = 18)
pt(2.61,df = 18,lower.tail = FALSE)
pt(1.85,df = 19,lower.tail = FALSE)
pt(1.85,df = 19,lower.tail = FALSE) * 2
0.4 / 2.3
0.4 / (2.3 / sqrt(5))
pt(0.3888814,df= 4,lower.tail = FALSE)
pt(0.3888814,df= 4)
pt(0.3888814,df= 4,lower.tail = FALSE) * 2
a <- data.frame(p = c(9,6,7),q = c(5,9,11), r = c(9,5,8))
a
colSums(a) / sum(a)
rowSums(a) / sum(a)
0.33333 * 0.3188406
0.1062791 * 23
sum(a)
0.1062791 * 69
data <- a
margcol <- colSums(data) / sum(data)
margrow <- rowSums(data) / sum(data)
xpProb <- data.frame()
#Loop to fill in data frame
for (i in 1:3){
# Makes row 1 and column i into the expected joint probability based on marginal probability
expProb[1,i] <- (margcol[i] * margrow[1])
# Makes row 2 and column i into the expected joint probability based on marginal probability
expProb[2,i] <- (margcol[i] * margrow[2])
# Add code to makes row 3 and column i into the expected joint probability based on marginal probability
expProb[3,i] <- (margcol[i] * margrow[3])
}
expProb <- data.frame()
#Loop to fill in data frame
for (i in 1:3){
# Makes row 1 and column i into the expected joint probability based on marginal probability
expProb[1,i] <- (margcol[i] * margrow[1])
# Makes row 2 and column i into the expected joint probability based on marginal probability
expProb[2,i] <- (margcol[i] * margrow[2])
# Add code to makes row 3 and column i into the expected joint probability based on marginal probability
expProb[3,i] <- (margcol[i] * margrow[3])
}
expProb
data
data[1,] <- data[1,] / sum(data[1,])
data[2,] <- data[2,] / sum(data[2,])
data[3,] <- data[3,] / sum(data[3,])
data
sum((data - expProb) / expProb)
sqrt(10.584 / 81)
tmpdat <- read.csv("pancreatic.csv",header = TRUE)
head(tmpdat)
tmpdat <- read.csv("pancreatic.csv")
tmpdat <- read.csv("pancreatic.csv",header = FALSE)
View(tmpdat)
sum(is.na(tmpdata))
sum(is.na(tmpdat))
tmpdat <- tmpdat[complete.cases(tmpdat),]
sum(is.na(tmpdat))
tmpdat[,-1] <- data.Normalization(tmpdat[,-1],type="n1",normalization = "column")
library(clusterSim)
tmpdat[,-1] <- data.Normalization(tmpdat[,-1],type="n1",normalization = "column")
View(tmpdat)
write.csv(tmpdat,"normal_pancreatic.csv")
tmpdat <- read.csv("colorectal_2.csv",header = FALSE)
View(tmpdat)
sum(is.na(tmpdat))
tmpdat[,-1] <- data.Normalization(tmpdat[,-1],type="n1",normalization = "column")
View(tmpdat)
write.csv(tmpdat,"normal_colorectal.csv")
tmpdat <- read.csv("prostate_2.csv",header = FALSE)
sum(is.na(tmpdat))
tmpdat[,-1] <- data.Normalization(tmpdat[,-1],type="n1",normalization = "column")
write.csv(tmpdat,"normal_prostate.csv")
tmpdat <- read.csv("aml.csv",header = FALSE)
sum(is.na(tmpdat))
tmpdat[,-1] <- data.Normalization(tmpdat[,-1],type="n1",normalization = "column")
write.csv(tmpdat,"normal_aml.csv")
library(Biobase)
library(GEOquery)
gds <- getGEO(filename = "GDS4794.soft.gz")
Meta(gds)$sample_count
tbl_gds <- Table(gds)[,]
tbl_gds$ID_REF <- NULL
tbl_gds <- tbl_gds[complete.cases(tbl_gds),]
tbl_gds[,-1] <- data.Normalization(tbl_gds[,-1],type="n1",normalization = "column")
tbl_gds <- tbl_gds[,c(1,BNeg,BPos)]
BNeg <- c(1,3,10:16,21:24,34:47,59:60) + 1
BPos <- c(2,4:9,17:20,25:33,48:58,61) + 1
tbl_gds <- tbl_gds[,c(1,BNeg,BPos)]
write.csv(tbl_gds,"normal_sclc.csv")
tmpdat <- read.csv("sclc.csv",header = FALSE)
sum(is.na(tmpdat))
tmpdat <- tmpdat[complete.cases(tmpdat),]
sum(is.na(tmpdat))
tmpdat[,-1] <- data.Normalization(tmpdat[,-1],type="n1",normalization = "column")
write.csv(tbl_gds,"normal_sclc.csv")
tmpdat <- read.csv("sclc.csv",header = FALSE)
dim(tmpdat)
tmpdat <- tmpdat[complete.cases(tmpdat),]
dim(tmpdat)
tmpdat[,-1] <- data.Normalization(tmpdat[,-1],type="n1",normalization = "column")
dim(tmpdat)
write.csv(tmpdat,"normal_sclc.csv")
install.packages("Som")
install.packages("som")
library(som)
data("yeast")
yeast <- yeast[, -c(1, 11)]
data("yeast")
str(yeast)
yeast <- yeast[, -c(1, 11)]
str(yeast)
yeast.f <- filtering(yeast)
yeast.f.n <- normalize(yeast.f)
foo <- som(yeast.f.n, xdim=5, ydim=6)
plot(foo)
foo <- som(yeast.f.n, xdim=5, ydim=6, topol="hexa", neigh="gaussian")
plot(foo)
library(modMax)
?geneticAlgorithm
RARI <- data.frame(Method=c('Proposed','SC3','SC3-estimated','SNN-Cliq','K-means','DBSCAN'),
ARI=c(1,0.6988945,0.2582586,0.9078748,0.8657011,0.1847844))
RPURITY <- data.frame(Method=c('Proposed','SC3','SC3-estimated','SNN-Cliq','K-means','DBSCAN'),
Purity=c(1,0.7878788,0.4242424,0.9090909,0.9090909,0.4242424))
RNMI <- data.frame(Method=c('Proposed','SC3','SC3-estimated','SNN-Cliq','K-means','DBSCAN'),
NMI=c(1,0.8234868,0.5227718,0.9602511,0.9391405,0.4701825))
p<-ggplot(RNMI, aes(x=Method, y=NMI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2)
p
library(ggplot2)
p<-ggplot(RNMI, aes(x=Method, y=NMI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2)
p
p
p + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9","#00ff00","#0000ff"))
p + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9","#00ff00","#0000ff","#ff0000"))
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#0000ff","#b200ff"))
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#b200ff"))
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#b200ff"))
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#b200ff"))
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
p + scale_size_manual(values = c(0.1, 1))
p<-ggplot(RNMI, aes(x=Method, y=NMI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1)
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
p<-ggplot(RPURITY, aes(x=Method, y=Purity, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1)
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
p<-ggplot(RARI, aes(x=Method, y=ARI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1)
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
YARI <- data.frame(Method=c('Proposed','SNN-Cliq','K-means','DBSCAN'),
ARI=c(0.826414699,0.8166748,0.5760032,0.0))
p<-ggplot(YARI, aes(x=Method, y=ARI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1)
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
id <- c(1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 1 , 1 , 1 , 1 , 3 , 1 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 6 , 6 , 7 , 6 , 6 , 6 , 6 , 7 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7)
length(id)
library(NMI)
coldata <- c(rep(1,3),rep(2,3),rep(3,6),rep(4,12),rep(5,20),rep(6,16),rep(7,30))
NMI(as.data.frame(x=c(1:90),y=id),as.data.frame(x=c(1:90),y=coldata))
id
length(id)
NMI(as.data.frame(x=c(1:90),y=id),as.data.frame(x=c(1:90),y=coldata))
NMI(data.frame(c(1:90),id),data.frame(c(1:90),coldata))
p<-ggplot(YNMI, aes(x=Method, y=NMI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1)
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
YNMI <- data.frame(Method=c('Proposed','SNN-Cliq','K-means','DBSCAN'),
NMI=c(0.8586975,0.8638892,0.7178921,0.0))
p<-ggplot(YNMI, aes(x=Method, y=NMI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1)
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
ClusterPurity <- function(clusters, classes) {
sum(apply(table(classes, clusters), 2, max)) / length(clusters)
}
ClusterPurity(id,coldata)
YPURITY <- data.frame(Method=c('Proposed','SNN-Cliq','K-means','DBSCAN'),
Purity=c(0.9111111,0.9666667,0.711111,0.333333))
p<-ggplot(YPURITY, aes(x=Method, y=Purity, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1)
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
id1 <- c(1 , 1 , 1 , 1 , 2 , 1 , 1 , 2 , 2 , 2 , 2 , 1 , 2 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 4 , 4 , 4 , 4 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 6 , 2 , 2 , 2 , 2 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 9 , 8 , 8 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 7 , 7 , 7 , 7)
length(id1)
coldata <- c(rep(1,50),rep(2,14),rep(3,28),rep(4,8),rep(5,10),rep(6,12),rep(7,4))
NMI(data.frame(c(1:126),id1),data.frame(c(1:126),coldata))
ClusterPurity(id1,coldata)
DARI <- data.frame(Method=c('Proposed','SC3','SC3-estimated','SNN-Cliq','K-means','DBSCAN'),
ARI=c(0.618953588604,0.3887861,0.494003,0.5895324,0.4237893,0.1203939))
DPURITY <- data.frame(Method=c('Proposed','SC3','SC3-estimated','SNN-Cliq','K-means','DBSCAN'),
Purity=c(0.9047619,0.6984127,0.5634921,0.8095238,0.7142857,0.4603175))
DNMI <- data.frame(Method=c('Proposed','SC3','SC3-estimated','SNN-Cliq','K-means','DBSCAN'),
NMI=c(0.791759,0.6564599,0.6661438,0.7801971,0.6828546,0.319407))
p<-ggplot(DARI, aes(x=Method, y=ARI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1)
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
p<-ggplot(YPURITY, aes(x=Method, y=Purity, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1)
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
p<-ggplot(DARI, aes(x=Method, y=ARI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1)
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
p<-ggplot(DARI, aes(x=Method, y=ARI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.6,  col = "red",lty=2,size = 1)
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
p<-ggplot(DARI, aes(x=Method, y=ARI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.6,  col = "red",lty=2,size = 1)
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
p<-ggplot(DNMI, aes(x=Method, y=NMI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1)
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
p<-ggplot(DPURITY, aes(x=Method, y=Purity, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1)
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#dcdcf9"))
length(unique(id1))
runif(10,0,1)
?kmeans
library(dbscan)
?DBSCAN
citation(dbscan())
citation(dbscan)
?citation
citation("dbscan")
citation("stats")
library(ggplot2)
library(ggplot)
?
g
h
r
library(ggplot2)
DARI <- data.frame(Method=c('Proposed','SC3','SC3\nestimated','SNN-Cliq','K-means','DBSCAN'),
ARI=c(0.667874875218,0.3887861,0.494003,0.5895324,0.4237893,0.1203939))
DPURITY <- data.frame(Method=c('Proposed','SC3','SC3\nestimated','SNN-Cliq','K-means','DBSCAN'),
Purity=c(0.8809524,0.6984127,0.5634921,0.8095238,0.7142857,0.4603175))
DNMI <- data.frame(Method=c('Proposed','SC3','SC3\nestimated','SNN-Cliq','K-means','DBSCAN'),
NMI=c(0.8494931,0.6564599,0.6661438,0.7801971,0.6828546,0.319407))
png("DNMI.png", width = 8, height = 8, units = 'in',res = 300)
p<-ggplot(DNMI, aes(x=Method, y=NMI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1) + ylim(0,1.0) +
theme_set(theme_gray(base_size = 10)) +
theme(axis.title=element_text(face="bold",size="14", color="black")) +
theme(axis.text=element_text(face="bold",size="12")) +
geom_text(aes(x=Method,y=NMI,label = format(DNMI$NMI, digits=2)),hjust=0.5,
size=3,color=rgb(100,100,100, maxColorValue=255))
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#590E8D"))
dev.off()
png("DNMI.png", width = 8, height = 8, units = 'in',res = 300)
p<-ggplot(DNMI, aes(x=Method, y=NMI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1) + ylim(0,1.0) +
theme_set(theme_gray(base_size = 10)) +
theme(axis.title=element_text(face="bold",size="14", color="black")) +
theme(axis.text=element_text(face="bold",size="12")) +
geom_text(aes(x=Method,y=NMI,label = format(DNMI$NMI, digits=2)))
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#590E8D"))
dev.off()
png("DNMI.png", width = 8, height = 8, units = 'in',res = 300)
p<-ggplot(DNMI, aes(x=Method, y=NMI, fill=Method)) +
geom_bar(stat="identity")+theme_minimal() +
geom_abline(slope=0, intercept=0.75,  col = "red",lty=2,size = 1) + ylim(0,1.0) +
theme_set(theme_gray(base_size = 10)) +
theme(axis.title=element_text(face="bold",size="14", color="black")) +
theme(axis.text=element_text(face="bold",size="12"))
p + scale_fill_manual(values=c("#00ffe9", "#ff83e0", "#00ff00","#0000ff","#ffe100","#590E8D"))
dev.off()
q()
a <- 1
source("http://bioconductor.org/biocLite.R")
biocLite(c("annotate", "AnnotationHub", "biomaRt", "DESeq2", "gage", "gageData", "GO.db", "pathview", "plotly", "DT"))
Rscript
?approx
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
approx(x,y)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
if(!require(devtools)){
install.packages("devtools") # If not already installed
}
devtools::install_github("JinmiaoChenLab/Rphenograph")
install.packages("devtools")
library(devtools)
install_github("GIS-SP-Group/RCA")
library(RCA)
?RCA
setwd("C://Users/theNamelessOne/Desktop/BaiduWifi/Projects/")
tr.pos <- read.csv("TR_POS.csv",header = FALSE)
dim(tr.pos)
View(tr.pos)
tr.neg <- read.csv("TR_NEG.csv",header = FALSE)
View(tr.neg)
dim(tr.neg)
tr <- rbind(tr.pos,tr.neg)
dim(tr)
feature <- read.delim("Features66.txt",header = FALSE)
feature
feature <- read.delim("Features66.txt",header = FALSE,sep = "\t")
feature
feature <- read.delim("Features66.txt",header = FALSE,sep = " ")
feature
feature <- read.delim("Features66.txt",header = FALSE)
feature
feature_name <- c()
for(i in 1:66){
feature_name <- c(feature_name,paste(split(feature[i],sep = " ")[-1]))
}
?split
for(i in 1:66){
feature_name <- c(feature_name,paste(strsplit(feature[i],sep = " ")[-1]))
}
?strsplit
for(i in 1:66){
feature_name <- c(feature_name,paste(strsplit(feature[i],split = " ")[-1]))
}
strsplit(feature[1],split = "[ ]")
strsplit(feature[1],split = "[]")
strsplit(feature[1],split = "[.]")
strsplit(feature[1],split = "[#]")
feature[1]
dim(feature)
feature[1,:]
feature[1,]
feature[2,]
strsplit(feature[1,],split = "[#]")
strsplit(feature[1,],split = "[]")
strsplit(feature[1,])
strsplit(feature[1,],split="")
unlist(feature[2,])
list(feature[2,])
strsplit(feature[1,],split = "a")
feature[2,]
feature[2,][[1]]
str(feature[2,])
str(feature[2,])[1]
str(feature[2,])
